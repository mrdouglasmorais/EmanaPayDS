a074a3111a5e0ddc77d90868ba7d8527
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyButton = require("./MyButton");
var _jsxRuntime = require("react/jsx-runtime");
describe('MyButton Component', function () {
  it('renders correctly with default props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyButton.Button, {
        text: "Click Me",
        onPress: jest.fn()
      })),
      getByText = _render.getByText;
    var buttonText = getByText('Click Me');
    expect(buttonText).toBeTruthy();
  });
  it('calls the onPress function when pressed', function () {
    var onPressMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyButton.Button, {
        text: "Click Me",
        onPress: onPressMock
      })),
      getByText = _render2.getByText;
    var button = getByText('Click Me');
    _reactNative.fireEvent.press(button);
    expect(onPressMock).toHaveBeenCalledTimes(1);
  });
  it('applies the custom color and textColor', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyButton.Button, {
        text: "Click Me",
        onPress: jest.fn(),
        color: "red",
        textColor: "yellow"
      })),
      getByText = _render3.getByText,
      getByTestId = _render3.getByTestId;
    var button = getByTestId('button');
    expect(button.props.style).toContainEqual({
      backgroundColor: 'red'
    });
    var buttonText = getByText('Click Me');
    expect(buttonText.props.style).toContainEqual({
      color: 'yellow'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9NeUJ1dHRvbiIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJCdXR0b24iLCJ0ZXh0Iiwib25QcmVzcyIsImplc3QiLCJmbiIsImdldEJ5VGV4dCIsImJ1dHRvblRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzc01vY2siLCJfcmVuZGVyMiIsImJ1dHRvbiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlcjMiLCJjb2xvciIsInRleHRDb2xvciIsImdldEJ5VGVzdElkIiwicHJvcHMiLCJzdHlsZSIsInRvQ29udGFpbkVxdWFsIiwiYmFja2dyb3VuZENvbG9yIl0sInNvdXJjZXMiOlsiQnV0dG9uLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQge0J1dHRvbn0gZnJvbSAnLi9NeUJ1dHRvbic7XG5cbmRlc2NyaWJlKCdNeUJ1dHRvbiBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGRlZmF1bHQgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoXG4gICAgICA8QnV0dG9uIHRleHQ9XCJDbGljayBNZVwiIG9uUHJlc3M9e2plc3QuZm4oKX0gLz5cbiAgICApO1xuXG4gICAgLy8gVmVyaWZpY2Egc2UgbyB0ZXh0byBkbyBib3TDo28gw6kgcmVuZGVyaXphZG9cbiAgICBjb25zdCBidXR0b25UZXh0ID0gZ2V0QnlUZXh0KCdDbGljayBNZScpO1xuICAgIGV4cGVjdChidXR0b25UZXh0KS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdjYWxscyB0aGUgb25QcmVzcyBmdW5jdGlvbiB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoXG4gICAgICA8QnV0dG9uIHRleHQ9XCJDbGljayBNZVwiIG9uUHJlc3M9e29uUHJlc3NNb2NrfSAvPlxuICAgICk7XG5cbiAgICAvLyBTaW11bGEgbyBjbGlxdWUgbm8gYm90w6NvXG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXh0KCdDbGljayBNZScpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhidXR0b24pO1xuXG4gICAgLy8gVmVyaWZpY2Egc2UgYSBmdW7Dp8OjbyBvblByZXNzIGZvaSBjaGFtYWRhXG4gICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIGl0KCdhcHBsaWVzIHRoZSBjdXN0b20gY29sb3IgYW5kIHRleHRDb2xvcicsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXh0LCBnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8QnV0dG9uXG4gICAgICAgIHRleHQ9XCJDbGljayBNZVwiXG4gICAgICAgIG9uUHJlc3M9e2plc3QuZm4oKX1cbiAgICAgICAgY29sb3I9XCJyZWRcIlxuICAgICAgICB0ZXh0Q29sb3I9XCJ5ZWxsb3dcIlxuICAgICAgLz5cbiAgICApO1xuXG4gICAgLy8gVmVyaWZpY2Egc2UgYSBjb3IgZGUgZnVuZG8gZm9pIGFwbGljYWRhXG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbicpO1xuICAgIGV4cGVjdChidXR0b24ucHJvcHMuc3R5bGUpLnRvQ29udGFpbkVxdWFsKHtiYWNrZ3JvdW5kQ29sb3I6ICdyZWQnfSk7XG5cbiAgICAvLyBWZXJpZmljYSBzZSBhIGNvciBkbyB0ZXh0byBmb2kgYXBsaWNhZGFcbiAgICBjb25zdCBidXR0b25UZXh0ID0gZ2V0QnlUZXh0KCdDbGljayBNZScpO1xuICAgIGV4cGVjdChidXR0b25UZXh0LnByb3BzLnN0eWxlKS50b0NvbnRhaW5FcXVhbCh7Y29sb3I6ICd5ZWxsb3cnfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsU0FBQSxHQUFBRixPQUFBO0FBQWtDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUVsQ0ksUUFBUSxDQUFDLG9CQUFvQixFQUFFLFlBQU07RUFDbkNDLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxZQUFNO0lBQy9DLElBQUFDLE9BQUEsR0FBb0IsSUFBQUMsbUJBQU0sRUFDeEIsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLFNBQUEsQ0FBQU8sTUFBTTtRQUFDQyxJQUFJLEVBQUMsVUFBVTtRQUFDQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUUsQ0FBRSxDQUMvQyxDQUFDO01BRk1DLFNBQVMsR0FBQVIsT0FBQSxDQUFUUSxTQUFTO0lBS2hCLElBQU1DLFVBQVUsR0FBR0QsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUN4Q0UsTUFBTSxDQUFDRCxVQUFVLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDakMsQ0FBQyxDQUFDO0VBRUZaLEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxZQUFNO0lBQ2xELElBQU1hLFdBQVcsR0FBR04sSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFBTSxRQUFBLEdBQW9CLElBQUFaLG1CQUFNLEVBQ3hCLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixTQUFBLENBQUFPLE1BQU07UUFBQ0MsSUFBSSxFQUFDLFVBQVU7UUFBQ0MsT0FBTyxFQUFFTztNQUFZLENBQUUsQ0FDakQsQ0FBQztNQUZNSixTQUFTLEdBQUFLLFFBQUEsQ0FBVEwsU0FBUztJQUtoQixJQUFNTSxNQUFNLEdBQUdOLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDcENPLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsTUFBTSxDQUFDO0lBR3ZCSixNQUFNLENBQUNFLFdBQVcsQ0FBQyxDQUFDSyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZsQixFQUFFLENBQUMsd0NBQXdDLEVBQUUsWUFBTTtJQUNqRCxJQUFBbUIsUUFBQSxHQUFpQyxJQUFBakIsbUJBQU0sRUFDckMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLFNBQUEsQ0FBQU8sTUFBTTtRQUNMQyxJQUFJLEVBQUMsVUFBVTtRQUNmQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUU7UUFDbkJZLEtBQUssRUFBQyxLQUFLO1FBQ1hDLFNBQVMsRUFBQztNQUFRLENBQ25CLENBQ0gsQ0FBQztNQVBNWixTQUFTLEdBQUFVLFFBQUEsQ0FBVFYsU0FBUztNQUFFYSxXQUFXLEdBQUFILFFBQUEsQ0FBWEcsV0FBVztJQVU3QixJQUFNUCxNQUFNLEdBQUdPLFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDcENYLE1BQU0sQ0FBQ0ksTUFBTSxDQUFDUSxLQUFLLENBQUNDLEtBQUssQ0FBQyxDQUFDQyxjQUFjLENBQUM7TUFBQ0MsZUFBZSxFQUFFO0lBQUssQ0FBQyxDQUFDO0lBR25FLElBQU1oQixVQUFVLEdBQUdELFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDeENFLE1BQU0sQ0FBQ0QsVUFBVSxDQUFDYSxLQUFLLENBQUNDLEtBQUssQ0FBQyxDQUFDQyxjQUFjLENBQUM7TUFBQ0wsS0FBSyxFQUFFO0lBQVEsQ0FBQyxDQUFDO0VBQ2xFLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==