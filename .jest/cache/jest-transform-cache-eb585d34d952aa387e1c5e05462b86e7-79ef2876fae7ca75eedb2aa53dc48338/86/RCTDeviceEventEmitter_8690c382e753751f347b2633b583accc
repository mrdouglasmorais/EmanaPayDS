41aec2e6ee8e83f918bd750232bbea07
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _Systrace = require("../Performance/Systrace");
var _EventEmitter2 = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var RCTDeviceEventEmitter = function (_EventEmitter) {
  function RCTDeviceEventEmitter() {
    (0, _classCallCheck2.default)(this, RCTDeviceEventEmitter);
    return _callSuper(this, RCTDeviceEventEmitter, arguments);
  }
  (0, _inherits2.default)(RCTDeviceEventEmitter, _EventEmitter);
  return (0, _createClass2.default)(RCTDeviceEventEmitter, [{
    key: "emit",
    value: function emit(eventType) {
      (0, _Systrace.beginEvent)(function () {
        return `RCTDeviceEventEmitter.emit#${eventType}`;
      });
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      _superPropGet(RCTDeviceEventEmitter, "emit", this, 3)([eventType].concat(args));
      (0, _Systrace.endEvent)();
    }
  }]);
}(_EventEmitter2.default);
var instance = new RCTDeviceEventEmitter();
Object.defineProperty(global, '__rctDeviceEventEmitter', {
  configurable: true,
  value: instance
});
var _default = exports.default = instance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfU3lzdHJhY2UiLCJyZXF1aXJlIiwiX0V2ZW50RW1pdHRlcjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NhbGxTdXBlciIsInQiLCJvIiwiZSIsIl9nZXRQcm90b3R5cGVPZjIiLCJkZWZhdWx0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiX3N1cGVyUHJvcEdldCIsInIiLCJwIiwiX2dldDIiLCJSQ1REZXZpY2VFdmVudEVtaXR0ZXIiLCJfRXZlbnRFbWl0dGVyIiwiX2NsYXNzQ2FsbENoZWNrMiIsImFyZ3VtZW50cyIsIl9pbmhlcml0czIiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJlbWl0IiwiZXZlbnRUeXBlIiwiYmVnaW5FdmVudCIsIl9sZW4iLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwiZW5kRXZlbnQiLCJFdmVudEVtaXR0ZXIiLCJpbnN0YW5jZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2xvYmFsIiwiY29uZmlndXJhYmxlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUkNURGV2aWNlRXZlbnRFbWl0dGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3RcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7SUV2ZW50RW1pdHRlcn0gZnJvbSAnLi4vdmVuZG9yL2VtaXR0ZXIvRXZlbnRFbWl0dGVyJztcblxuaW1wb3J0IHtiZWdpbkV2ZW50LCBlbmRFdmVudH0gZnJvbSAnLi4vUGVyZm9ybWFuY2UvU3lzdHJhY2UnO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi92ZW5kb3IvZW1pdHRlci9FdmVudEVtaXR0ZXInO1xuXG4vLyBGSVhNRTogdXNlIHR5cGVkIGV2ZW50c1xudHlwZSBSQ1REZXZpY2VFdmVudERlZmluaXRpb25zID0gJEZsb3dGaXhNZTtcblxuLyoqXG4gKiBHbG9iYWwgRXZlbnRFbWl0dGVyIHVzZWQgYnkgdGhlIG5hdGl2ZSBwbGF0Zm9ybSB0byBlbWl0IGV2ZW50cyB0byBKYXZhU2NyaXB0LlxuICogRXZlbnRzIGFyZSBpZGVudGlmaWVkIGJ5IGdsb2JhbGx5IHVuaXF1ZSBldmVudCBuYW1lcy5cbiAqXG4gKiBOYXRpdmVNb2R1bGVzIHRoYXQgZW1pdCBldmVudHMgc2hvdWxkIGluc3RlYWQgc3ViY2xhc3MgYE5hdGl2ZUV2ZW50RW1pdHRlcmAuXG4gKi9cbmNsYXNzIFJDVERldmljZUV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50RW1pdHRlcjxSQ1REZXZpY2VFdmVudERlZmluaXRpb25zPiB7XG4gIC8vIEFkZCBzeXN0cmFjZSB0byBSQ1REZXZpY2VFdmVudEVtaXR0ZXIuZW1pdCBtZXRob2QgZm9yIGRlYnVnZ2luZ1xuICBlbWl0PFRFdmVudDogJEtleXM8UkNURGV2aWNlRXZlbnREZWZpbml0aW9ucz4+KFxuICAgIGV2ZW50VHlwZTogVEV2ZW50LFxuICAgIC4uLmFyZ3M6IFJDVERldmljZUV2ZW50RGVmaW5pdGlvbnNbVEV2ZW50XVxuICApOiB2b2lkIHtcbiAgICBiZWdpbkV2ZW50KCgpID0+IGBSQ1REZXZpY2VFdmVudEVtaXR0ZXIuZW1pdCMke2V2ZW50VHlwZX1gKTtcbiAgICBzdXBlci5lbWl0KGV2ZW50VHlwZSwgLi4uYXJncyk7XG4gICAgZW5kRXZlbnQoKTtcbiAgfVxufVxuY29uc3QgaW5zdGFuY2UgPSBuZXcgUkNURGV2aWNlRXZlbnRFbWl0dGVyKCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwsICdfX3JjdERldmljZUV2ZW50RW1pdHRlcicsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB2YWx1ZTogaW5zdGFuY2UsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKGluc3RhbmNlOiBJRXZlbnRFbWl0dGVyPFJDVERldmljZUV2ZW50RGVmaW5pdGlvbnM+KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFZQSxJQUFBQSxTQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxjQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFBMEQsU0FBQUcsV0FBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxPQUFBRSxnQkFBQSxDQUFBQyxPQUFBLEVBQUFILENBQUEsT0FBQUksMkJBQUEsQ0FBQUQsT0FBQSxFQUFBSixDQUFBLEVBQUFNLHlCQUFBLEtBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBUCxDQUFBLEVBQUFDLENBQUEsWUFBQUMsZ0JBQUEsQ0FBQUMsT0FBQSxFQUFBSixDQUFBLEVBQUFTLFdBQUEsSUFBQVIsQ0FBQSxDQUFBUyxLQUFBLENBQUFWLENBQUEsRUFBQUUsQ0FBQTtBQUFBLFNBQUFJLDBCQUFBLGNBQUFOLENBQUEsSUFBQVcsT0FBQSxDQUFBQyxTQUFBLENBQUFDLE9BQUEsQ0FBQUMsSUFBQSxDQUFBUCxPQUFBLENBQUFDLFNBQUEsQ0FBQUcsT0FBQSxpQ0FBQVgsQ0FBQSxhQUFBTSx5QkFBQSxZQUFBQSwwQkFBQSxhQUFBTixDQUFBO0FBQUEsU0FBQWUsY0FBQWYsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQWMsQ0FBQSxRQUFBQyxDQUFBLE9BQUFDLEtBQUEsQ0FBQWQsT0FBQSxNQUFBRCxnQkFBQSxDQUFBQyxPQUFBLE1BQUFZLENBQUEsR0FBQWhCLENBQUEsQ0FBQVksU0FBQSxHQUFBWixDQUFBLEdBQUFDLENBQUEsRUFBQUMsQ0FBQSxjQUFBYyxDQUFBLHlCQUFBQyxDQUFBLGFBQUFqQixDQUFBLFdBQUFpQixDQUFBLENBQUFQLEtBQUEsQ0FBQVIsQ0FBQSxFQUFBRixDQUFBLE9BQUFpQixDQUFBO0FBQUEsSUFXcERFLHFCQUFxQixhQUFBQyxhQUFBO0VBQUEsU0FBQUQsc0JBQUE7SUFBQSxJQUFBRSxnQkFBQSxDQUFBakIsT0FBQSxRQUFBZSxxQkFBQTtJQUFBLE9BQUFwQixVQUFBLE9BQUFvQixxQkFBQSxFQUFBRyxTQUFBO0VBQUE7RUFBQSxJQUFBQyxVQUFBLENBQUFuQixPQUFBLEVBQUFlLHFCQUFBLEVBQUFDLGFBQUE7RUFBQSxXQUFBSSxhQUFBLENBQUFwQixPQUFBLEVBQUFlLHFCQUFBO0lBQUFNLEdBQUE7SUFBQUMsS0FBQSxFQUV6QixTQUFBQyxJQUFJQSxDQUNGQyxTQUFpQixFQUVYO01BQ04sSUFBQUMsb0JBQVUsRUFBQztRQUFBLE9BQU0sOEJBQThCRCxTQUFTLEVBQUU7TUFBQSxFQUFDO01BQUMsU0FBQUUsSUFBQSxHQUFBUixTQUFBLENBQUFTLE1BQUEsRUFGekRDLElBQUksT0FBQUMsS0FBQSxDQUFBSCxJQUFBLE9BQUFBLElBQUEsV0FBQUksSUFBQSxNQUFBQSxJQUFBLEdBQUFKLElBQUEsRUFBQUksSUFBQTtRQUFKRixJQUFJLENBQUFFLElBQUEsUUFBQVosU0FBQSxDQUFBWSxJQUFBO01BQUE7TUFHUG5CLGFBQUEsQ0FBQUkscUJBQUEsb0JBQVdTLFNBQVMsRUFBQU8sTUFBQSxDQUFLSCxJQUFJO01BQzdCLElBQUFJLGtCQUFRLEVBQUMsQ0FBQztJQUNaO0VBQUM7QUFBQSxFQVRpQ0Msc0JBQVk7QUFXaEQsSUFBTUMsUUFBUSxHQUFHLElBQUluQixxQkFBcUIsQ0FBQyxDQUFDO0FBRTVDb0IsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE1BQU0sRUFBRSx5QkFBeUIsRUFBRTtFQUN2REMsWUFBWSxFQUFFLElBQUk7RUFDbEJoQixLQUFLLEVBQUVZO0FBQ1QsQ0FBQyxDQUFDO0FBQUMsSUFBQUssUUFBQSxHQUFBQyxPQUFBLENBQUF4QyxPQUFBLEdBRWFrQyxRQUFRIiwiaWdub3JlTGlzdCI6W119